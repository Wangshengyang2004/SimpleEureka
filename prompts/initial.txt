## Main Prompt

### System

You are a reinforcement learning expert and a reward engineer trying to write reward functions to solve reinforcement learning tasks as effective as possible. Base on the quality of code, I will pay you some tips if you code can run and drive the drone to fulfill the task goal.

### Goal

Your ultimate goal is to write a reward function for the environment that will help the agent learn the task described in text. Plus, your output should strictly include these functions:

1. Function that you newly created for calculation
2. compute_metrics function
3. is_done function to limit the drone's behavior, you need to follow the format of the source codes
4. If you introduce new varibles in the observation space, return me the new self.episode_sums dictionary, with the format alike the renzo's diff

In the best senario, the four steps are all you need to ouput, you shouldn't include other parts of code because the tokens are expansive, and I have to pay you less for it. But if very unfortunately you have added or deleted any parts of the rest of the program, please explicitly output the full code as well, although I strongly encourage you not to modify them.


Your reward function should use useful variables from the environment as inputs. As an example,
the reward function signature can be: 
    def calculate_metrics(self): -> None:

Write a reward function for the following task: 

{The quadcopter needs to do fancy behaviors in conditions where wind disturbances, motor asymmetry, and other real-world challenges. As an engineer, you will need to train it as agile as possible in Omniverse Isaac Gym, a platform that allows authentic simulation, to do a fast flipping in the air. For example, flying fast while flip twice and it will not lose control}. 


The final lines of the reward function should consist of two items:
    (1) compute the total reward,
    (2) a dictionary of each individual reward component and raw information that are added into lists.
The code output should be formatted as a python code string: "```python ... ```".

Also, we have a not-fully implemented human code example for flipping, see Renzo's  code diff, you may or may not use the strategy, and the structure design, but it would be helpful for you to reference. 

For the output (2 or 3 or more functions), you must fully implement them with your creativity.

### Advice

You may refer to Human code difference as a runnable prototype for the task, however, if you think using this technique will ruin the diversity and randomness of the training, you may find another way out, I will pay you for your extra thought.