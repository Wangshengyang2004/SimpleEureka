- Since you are not allowed to modify other parts of the code, you can recreate the varibles and constants in the beginning of the calculate_metrics function, e.g., your target_position is no longer (0,0,2) initialized in the `set_target` but (4,4,4) to be created in `calculate_metrics`. Please make sure the tensor shape is match with the original one
- You must make sure the self.xxx varible is defined, e.g., self.target_position or self.orient_z need be created in the calculate_metrics function. Your newly defined functions need to include self because they're the class method, plus, when calling them elsewhere, a self.your_new_function is necessary for Python
- Since the whole pragram's operation is based on Tensor, please make sure that the code is compatible with TorchScript (e.g., use torch tensor instead of numpy array). 
- Make sure any new tensor or variable you introduce is on the same device as the input tensors. 
- Ensure that tensor shape matches during calculation
- If you create any new functions, then you must be sure to write the full function explicitly and return me the full code without any omission 
- You may find it helpful to normalize the reward to a fixed range by applying transformations like torch.exp to the overall reward or its components.
- If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable. This is for tuning purpose
- Make sure the type of each input variable is correctly specified; a float input variable should not be specified as torch.Tensor
- Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.

Your output format. (just for the skeleton)

```Python
# New Code Starts Here
import math
import xxx

def name_your_new_function_here(xxx) -> None:
    pass

def calculate_metrics(self) -> None:
    # Make sure the new variables you introduced is well-defined
    self.new_function_here(xxx, yyy, zzz) # Remember to add self.name_your_new_function_here. It's in a class
    ...
    root_positions = self.root_pos - self._env_pos
    ...
    target_dist = torch.sqrt(torch.square(self.target_positions - root_positions).sum(-1))
    ...
    ups = quat_axis(root_quats, 2)

    # These three for example, you must not forget to initialize them here
    self.target_dist = target_dist
    self.root_positions = root_positions
    self.orient_z = ups[..., 2]
    ...
    spin = torch.square(root_angvels).sum(-1)
    spin_reward = 0.01 * torch.exp(-0.1 * spin)
    total_reward = pos_reward + pos_reward * (orient_reward + spin_reward) - effort_reward
    self.rew_buf[:] = total_reward
    self.episode_sums["rew_pos"] += pos_reward
    self.episode_sums["rew_orient"] += orient_reward
    self.episode_sums["rew_effort"] += effort_reward
    self.episode_sums["rew_spin"] += spin_reward
    self.episode_sums["raw_dist"] += target_dist
    self.episode_sums["raw_orient"] += ups[..., 2]
    self.episode_sums["raw_effort"] += effort
    self.episode_sums["raw_spin"] += spin

def is_done(self) -> None:
    pass # Make sure all variables here has self.xxx and in calculate_metrics you assign values to self.xxx
#END

```