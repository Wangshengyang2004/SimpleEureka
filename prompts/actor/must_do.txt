
These variables used in the is_done function must be defined in calculate_metrics function:
Your output format, just for the skeleton. You must pay attention to the content labeled with "### ###" in the following code:
If the task is not target_dist related, it cound be other variables need to be initialized in, anyway, don't forget the initialization, otherwise the code will never run successfully.
## These three for example, you must not forget to initialize them here
    self.target_dist = target_dist
    self.root_positions = root_positions
    self.orient_z = ups[..., 2]
    ###
Also, the following cause error here: Reintroduce class
ensure no "class" or "__init__" is included in your output
```python
 # New Code Starts Here
    
    import math
    import numpy as np
    import torch
    from omni.isaac.core.utils.torch.rotations import *
    EPS = 1e-6  # small constant to avoid divisions by 0 and log(0)
    
    
    class CrazyflieTask(RLTask): 
        # Function that you newly created for calculation
```

Plus since you cannot initialize the reward buffer, you must include the following dict keys, even though your values don't related to the keysself.episode_sums["rew_pos"] += pos_reward
    self.episode_sums["rew_orient"] += 
    self.episode_sums["rew_effort"] += 
    self.episode_sums["rew_spin"] += 
    self.episode_sums["rew_speed"] +=
    self.episode_sums["raw_dist"] += 
    self.episode_sums["raw_orient"] += 
    self.episode_sums["raw_effort"] += 
    self.episode_sums["raw_spin"] += 
Adding new self.episode_sums[key] will cause error
So the desired output is, you should check your code and correct any mistakes while you are reasoning and outputing: 
```Python
# New Code Starts Here
import math
import xxx
# Write down your thinking steps and reasoning process as comments for lines of code that's important.
def name_your_new_function_here(xxx) -> None:
    pass

def calculate_metrics(self) -> None:
    # Make sure a temperature constant is introduced and tuning the reward
    temperature = 0.75
    # Make sure the new variables you introduced is well-defined
    self.new_function_here(xxx, yyy, zzz) # Remember to add self.name_your_new_function_here. It's in a class
    ...
    root_positions = self.root_pos - self._env_pos
    ...
    target_dist = torch.sqrt(torch.square(self.target_positions - root_positions).sum(-1))
    ...
    ups = quat_axis(root_quats, 2)

    #These three for example, you must not forget to initialize them here
    self.target_dist = target_dist
    self.root_positions = root_positions
    self.orient_z = ups[..., 2]
    #Please try your best to Remember this
    ...
    spin = torch.square(root_angvels).sum(-1)
    spin_reward = 0.01 * torch.exp(-0.1 * spin)
    total_reward = pos_reward + pos_reward * (orient_reward + spin_reward) - effort_reward
    self.rew_buf[:] = total_reward

    # Make sure the left side, self.episode_sums maintains the same, though the key may not align with our new variables, but never mind
    self.episode_sums["rew_pos"] += pos_reward
    self.episode_sums["rew_orient"] += orient_reward
    self.episode_sums["rew_effort"] += effort_reward
    self.episode_sums["rew_spin"] += spin_reward
    self.episode_sums["raw_dist"] += target_dist
    self.episode_sums["raw_orient"] += ups[..., 2]
    self.episode_sums["raw_effort"] += effort
    self.episode_sums["raw_spin"] += spin

# Every varible must be checked available in is_done method
def is_done(self) -> None:
    pass # Make sure all variables here has self.xxx and in calculate_metrics you assign values to self.xxx
#END
```