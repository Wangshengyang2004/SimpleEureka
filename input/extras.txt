Function explanation
class CrazyflieTask(RLTask):
    def __init__(self, name, sim_config, env, offset=None):
        # Initializes the task with simulation configuration, environmental setup, and task-specific settings.

    def update_config(self, sim_config):
        # Updates task configuration with simulation parameters and environment settings.

    def set_up_scene(self, scene):
        # Sets up the simulation scene, including the Crazyflie drone and the target object.

    def initialize_views(self, scene):
        # Initializes the views for the Crazyflie and the target, ensuring they are properly registered in the scene.

    def get_crazyflie(self):
        # Creates and configures the Crazyflie drone within the simulation environment.

    def get_target(self):
        # Creates and places the target object within the simulation environment.

    def get_observations(self) -> dict:
        # Collects and returns observations from the environment, including drone and target states.

    def pre_physics_step(self, actions):
        # Processes actions from the neural network before the simulation physics step, applying forces and velocities.

    def post_reset(self):
        # Resets the task environment and variables after an episode ends, preparing for a new episode.

    def set_targets(self, env_ids):
        # Sets new target positions for a subset of environments, typically after an episode reset.

    def reset_idx(self, env_ids):
        # Resets the state of specific environments identified by their indices, including drone position and velocity.

    def calculate_metrics(self):
        # Calculates and updates reward and other metrics based on the current state of the environment.

    def is_done(self):
        # Checks and updates the done status for each environment, based on task-specific termination criteria.

### Quaternion conversion Official function:

```Python
def gf_quat_to_tensor(orientation: typing.Union[Gf.Quatd, Gf.Quatf, Gf.Quaternion], device=None) -> torch.Tensor:
    # Converts a pxr Quaternion type to a torch array (scalar first).

def euler_angles_to_quats(euler_angles: torch.Tensor, degrees: bool = False, extrinsic: bool = True, device=None) -> torch.Tensor:
    # Vectorized version of converting euler angles to quaternion (scalar first)

def rot_matrices_to_quats(rotation_matrices: torch.Tensor, device=None) -> torch.Tensor:
    # Vectorized version of converting rotation matrices to quaternions

def rad2deg(radian_value: torch.Tensor, device=None) -> torch.Tensor:
    # Converts radians to degrees and returns a tensor.

def deg2rad(degree_value: float, device=None) -> torch.Tensor:
    # Converts degrees to radians and returns a tensor.

```