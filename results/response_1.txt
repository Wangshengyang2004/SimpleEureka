```python
import torch
from omni.isaac.core.objects import DynamicSphere
from omni.isaac.core.prims import RigidPrimView
from omni.isaac.core.utils.prims import get_prim_at_path
from omni.isaac.core.utils.torch.rotations import *
from omniisaacgymenvs.tasks.base.rl_task import RLTask
from omniisaacgymenvs.robots.articulations.crazyflie import Crazyflie
from omniisaacgymenvs.robots.articulations.views.crazyflie_view import CrazyflieView
import torch.distributions as D
from functorch import vmap

EPS = 1e-6  # small constant to avoid divisions by 0 and log(0)

class CrazyflieTask(RLTask):
    def __init__(self, name, sim_config, env, offset=None) -> None:
        self.update_config(sim_config)
        self._num_observations = 18
        self._num_actions = 4
        self._ball_position = torch.tensor([0, 0, 2.0], device=self.device)
        RLTask.__init__(self, name=name, env=env)
        self._crazyflie_position = torch.tensor([0, 0, 2.0], device=self.device)
        self.traj_c_dist = D.Uniform(torch.tensor(-0.6, device=self.device), torch.tensor(0.6, device=self.device))
        self.traj_scale_dist = D.Uniform(torch.tensor([1.8, 1.8, 1.], device=self.device), torch.tensor([3.2, 3.2, 1.5], device=self.device))
        self.traj_w_dist = D.Uniform(torch.tensor(0.8, device=self.device), torch.tensor(1.1, device=self.device))
        self.traj_c = torch.zeros(self.num_envs, device=self.device)
        self.traj_t0 = torch.pi / 2
        self.traj_scale = torch.zeros(self.num_envs, 3, device=self.device)
        self.traj_rot = torch.zeros(self.num_envs, 4, device=self.device)
        self.traj_w = torch.ones(self.num_envs, device=self.device)
        self.target_pos = torch.zeros(self.num_envs, 4, 3, device=self.device)

    def update_config(self, sim_config):
        self._sim_config = sim_config
        self._cfg = sim_config.config
        self._task_cfg = sim_config.task_config
        self._num_envs = self._task_cfg["env"]["numEnvs"]
        self._env_spacing = self._task_cfg["env"]["envSpacing"]
        self._max_episode_length = self._task_cfg["env"]["maxEpisodeLength"]
        self.dt = self._task_cfg["sim"]["dt"]
        self.arm_length = 0.05
        self.motor_damp_time_up = 0.15
        self.motor_damp_time_down = 0.15
        self.motor_tau_up = 4 * self.dt / (self.motor_damp_time_up + EPS)
        self.motor_tau_down = 4 * self.dt / (self.motor_damp_time_down + EPS)
        self.mass = 0.028
        self.thrust_to_weight = 1.9
        self.motor_assymetry = np.array([1.0, 1.0, 1.0, 1.0])
        self.motor_assymetry = self.motor_assymetry * 4.0 / np.sum(self.motor_assymetry)
        self.grav_z = -1.0 * self._task_cfg["sim"]["gravity"][2]

    def set_up_scene(self, scene) -> None:
        self.get_crazyflie()
        self.get_target()
        RLTask.set_up_scene(self, scene)
        self._copters = CrazyflieView(prim_paths_expr="/World/envs/.*/Crazyflie", name="crazyflie_view")
        self._balls = RigidPrimView(prim_paths_expr="/World/envs/.*/ball", name="ball_view")
        scene.add(self._copters)
        scene.add(self._balls)
        for i in range(4):
            scene.add(self._copters.physics_rotors[i])

    def initialize_views(self, scene) -> None:
        super().initialize_views(scene)
        if scene.object_exists("crazyflie_view"):
            scene.remove_object("crazyflie_view", registry_only=True)
        if scene.object_exists("ball_view"):
            scene.remove_object("